import java.util.zip.ZipOutputStream

//import org.kingdoms.gradle.KingdomsGradleCommons
//import org.kingdoms.gradle.KingdomsGradleCommons.excludeKotlin
//import org.kingdoms.gradle.KingdomsGradleCommons.relocateLibs
import com.github.jengelman.gradle.plugins.shadow.transformers.Transformer
import com.github.jengelman.gradle.plugins.shadow.transformers.TransformerContext
import org.apache.tools.zip.ZipOutputStream
import org.gradle.api.file.FileTreeElement

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '2.0.20-Beta2'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group = 'top.mckingdom.auspice'
version = '2.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT"
    implementation(files("libs/kotlin-stdlib-2.0.20-Beta2-remapped.jar"))
    implementation(files("libs/KingdomsX-1.17.0-ALPHA.jar"))
    compileOnly(files("libs/xseries-11.2.0.1-remapped.jar"))
    compileOnly(files("libs/hikari-5.1.0-remapped.jar"))
    compileOnly(files("libs/guava-33.2.1-jre-remapped.jar"))
    compileOnly(files("libs/gson-2.11.0-remapped.jar"))
    compileOnly(files("libs/caffeine-3.1.8-remapped.jar"))
//    compileOnly "com.github.cryptomorin:kingdoms:1.16.8.1.1"

    compileOnly "org.bstats:bstats-bukkit:3.0.2"
}



//class AuspiceAddonTransformer implements Transformer {
//
//    @Override
//    boolean canTransformResource(FileTreeElement element) { true }
//
//    @Override
//    void transform(TransformerContext context) {
//
//    }
//
//    @Override
//    boolean hasTransformedResource() { true }
//
//    @Override
//    void modifyOutputStream(shadow.org.apache.tools.zip.ZipOutputStream zipOutputStream, boolean b) {
//
//    }
//
//    void modifyOutputStream(ZipOutputStream jos, boolean preserveFileTimestamps) {}
//}


shadowJar {
//    transform(AuspiceAddonTransformer.class)
    relocate('kotlin', 'org.kingdoms.libs.kotlin') {
    include(dependsOn "libs/kotlin-stdlib-2.0.20-Beta2-remapped.jar")
    }

}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}


processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

